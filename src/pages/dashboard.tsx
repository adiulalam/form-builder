import Head from "next/head";
import { Box, Tabs, Tab } from "@mui/material";
import type { SyntheticEvent } from "react";
import {
  DashboardAnswer,
  DashboardForm,
  DashboardQuestion,
} from "@/components/dashboard";
import type { GetServerSidePropsContext } from "next";
import { getServerSession } from "next-auth";
import { authOptions } from "@/server/auth";
import { useSearchParams } from "next/navigation";
import { useRouter } from "next/router";

enum DashboardParamsMap {
  form,
  question,
  answer,
}

export default function Home() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const tab = (searchParams.get("tab") ??
    "form") as keyof typeof DashboardParamsMap;
  const currentTab = DashboardParamsMap[tab] as number;

  const handleChange = (_: SyntheticEvent, newValue: number) => {
    void router.push({
      pathname: "/dashboard",
      query: { tab: DashboardParamsMap[newValue] },
    });
  };

  const tabsList = [
    {
      label: "Form",
      Component: () => <DashboardForm />,
    },
    {
      label: "Question",
      Component: () => <DashboardQuestion />,
    },
    {
      label: "Answer",
      Component: () => <DashboardAnswer />,
    },
  ];

  return (
    <>
      <Head>
        <title>FILDER - Dashboard</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box className="flex min-h-screen flex-col items-center gap-4 p-2">
        <Box
          sx={{ borderColor: "divider" }}
          className="flex w-full justify-center border-b-2"
        >
          <Tabs value={currentTab} onChange={handleChange}>
            {tabsList.map(({ label }, index) => (
              <Tab key={index} label={label} />
            ))}
          </Tabs>
        </Box>

        {tabsList.map(
          ({ Component }, index) =>
            index === currentTab && <Component key={index} />
        )}
      </Box>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  try {
    const userSession = await getServerSession(
      context.req,
      context.res,
      authOptions
    );

    if (!userSession?.user?.id)
      return { redirect: { destination: "/", permanent: false } };

    return { props: { userSession } };
  } catch (error) {
    console.error(error);
    return { redirect: { destination: "/", permanent: false } };
  }
}
