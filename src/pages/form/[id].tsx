import { type GetServerSidePropsContext } from "next";
import Head from "next/head";
import { api } from "@/utils/api";
import { getSession } from "next-auth/react";
import { useRouter } from "next/router";
import { z } from "zod";
import { FormProvider } from "@/store";
import { FormNavbar } from "@/components/form";
import { Box, Paper } from "@mui/material";
import { QuestionAdd, QuestionCard } from "@/components/question";

const isValidID = (uuid: string): boolean => {
  try {
    const data = z.object({ uuid: z.string().uuid() }).parse({ uuid });
    return !!data.uuid;
  } catch (e) {
    return false;
  }
};

export default function Forms() {
  const router = useRouter();
  const { id } = router.query as { id: string };
  const isValidUUID = isValidID(id);

  const { data: formData, isFetching } = api.form.getPrivateForm.useQuery(
    { id },
    { enabled: isValidUUID },
  );

  if (!formData?.data.form) {
    return <div>error</div>;
  }

  return (
    <>
      <Head>
        <title>FILDER - Form</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center gap-4 bg-gradient-to-b from-[#2e026d] to-[#15162c] p-1">
        <FormProvider store={formData.data.form}>
          <Paper className="w-full max-w-screen-xl p-2">
            <FormNavbar isFetching={isFetching} />
          </Paper>

          <Box
            className="m-auto flex h-full w-full flex-col flex-wrap items-center justify-evenly gap-4"
            maxWidth={"xl"}
          >
            <QuestionCard />
            <QuestionCard />
            <QuestionCard />
          </Box>

          <QuestionAdd />
        </FormProvider>
      </main>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  try {
    const userSession = await getSession(context);

    if (!userSession?.user?.id)
      return { redirect: { destination: "/", permanent: false } };

    return { props: { userSession } };
  } catch (error) {
    console.error(error);
    return { redirect: { destination: "/", permanent: false } };
  }
}
