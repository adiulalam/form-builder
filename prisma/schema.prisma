generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Form {
    id        String     @id @default(uuid())
    status    Status     @default(DRAFT)
    title     String
    userId    String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    questions Question[]

    @@index([userId])
}

enum Status {
    DRAFT
    COMPLETED
}

model Question {
    id        String   @id @default(uuid())
    question  String
    order     Int      @unique @default(autoincrement())
    type      Type?
    formId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
    options   Option[]

    @@index([formId])
}

model Option {
    id         String   @id @default(uuid())
    value      String
    questionId String
    order      Int      @unique @default(autoincrement())
    showInput  Boolean  @default(false)
    inputText  String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@index([questionId])
}

enum Type {
    DROPDOWN
    RADIO
    INPUT
    CHECKBOX
}

// Necessary for Next auth
model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    forms         Form[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
